syntax on

set hidden
set noerrorbells
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set autoindent
set nu rnu
set nowrap
set smartcase
set noswapfile
set nobackup
set nowritebackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set cmdheight=2
set updatetime=300
set shortmess+=c
if has('nvim')
    set noshowmode
    set signcolumn=yes
endif

" leader boi
let mapleader = " "

" clear stuff
nnoremap <leader>/ :let @/ = ""<CR>
nnoremap <leader>ws :%s/\s\+$//e<CR>

" netrw boi
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20

" window stuff
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <leader>pv :Lexplore<CR>
nnoremap <leader>= :vertical resize +5<CR>
nnoremap <leader>- :vertical resize -5<CR>
nnoremap <leader>6 <C-^>

" move stuff around
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" preferences
nnoremap <leader>, :e ~/.vimrc<CR>

" auto-install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" plug list
call plug#begin('~/.vim/plugged')
" use everywhere
Plug 'gruvbox-community/gruvbox'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

" use locally
if has('nvim')
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'itchyny/lightline.vim'
    Plug 'shinchu/lightline-gruvbox.vim'
    Plug 'sheerun/vim-polyglot'
    Plug 'mbbill/undotree'
    " Plug 'ThePrimeagen/vim-be-good', {'do': './install.sh'}
endif
call plug#end()

" colors
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_invert_selection = '0'
let g:lightline = {}
let g:lightline.colorscheme = 'gruvbox'
set background=dark
highlight Normal ctermbg=NONE guibg=NONE
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" fzf
nnoremap <leader>pg :GFiles<CR>
nnoremap <leader>pf :Files<CR>

" vim-commentary
autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s

" nvim specific
if has('nvim')
    " make
    set makeprg=ninja\ -Cbuild
    nnoremap <leader>5 :make<CR>

    " undotree
    nnoremap <leader>u :UndotreeShow<CR>

    " coc
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    inoremap <silent><expr> <c-space> coc#refresh()

    if exists('*complete_info')
        inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
        inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif

    nmap <leader>gd <Plug>(coc-definition)
    nmap <leader>gy <Plug>(coc-type-definition)
    nmap <leader>gi <Plug>(coc-implementation)
    nmap <leader>gr <Plug>(coc-references)
    nmap <leader>rr <Plug>(coc-rename)
    nmap <leader>[g <Plug>(coc-diagnostic-prev)
    nmap <leader>]g <Plug>(coc-diagnostic-next)
    nmap <silent> <leader>gp <Plug>(coc-diagnostic-prev-error)
    nmap <silent> <leader>gn <Plug>(coc-diagnostic-next-error)
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)
    nnoremap <leader>cr :CocRestart<CR>
    nnoremap <leader>4 :CocCommand clangd.switchSourceHeader<CR>
    command! -nargs=0 Format :call CocAction('format')
endif
